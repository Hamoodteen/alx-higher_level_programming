The ``text_indentation`` module
======================

Using ``text_indentation``
-------------------

Write a function that prints My name is <first name> <last name>

    Prototype: def text_indentation(first_name, last_name=""):
    first_name and last_name must be strings otherwise, raise a TypeError exception with the message first_name must be a string or last_name must be a string
    You are not allowed to import any module

>>> text_indentation = __import__('5-text_indentation').text_indentation
>>> text_indentation("chdgishjk.diuhsiud:duygjj?asdfg")
chdgishjk.
<BLANKLINE>
diuhsiud:
<BLANKLINE>
duygjj?
<BLANKLINE>
asdfg
>>> a = 9.8
>>> text_indentation(a)
Traceback (most recent call last):
    ...
TypeError: text must be a string
>>> text_indentation(str(a))
9.
<BLANKLINE>
8
>>> text_indentation(["ana?ahmed"], ["ana:ahmed"], ["ahmed.only"]) # doctest: +ELLIPSIS
Traceback (most recent call last):
    ...
TypeError: text_indentation() takes 1 positional argument but ...
>>> text_indentation(["ana?ahmed", "ana:ahmed", "ahmed.only"])
Traceback (most recent call last):
    ...
TypeError: text must be a string
>>> text_indentation(i for i in ["ana?ahmed", "ana:ahmed", "ahmed.only"])
Traceback (most recent call last):
    ...
TypeError: text must be a string
>>> text_indentation(i for i in "ana?ahmed")
Traceback (most recent call last):
    ...
TypeError: text must be a string
>>> text_indentation(" ".join(["ana?ahmed", "ana:ahmed", "ahmed.only"]))
ana?
<BLANKLINE>
ahmed ana:
<BLANKLINE>
ahmed ahmed.
<BLANKLINE>
only
>>> text_indentation(".".join(["ana?ahmed", "ana:ahmed", "ahmed.only"]))
ana?
<BLANKLINE>
ahmed.
<BLANKLINE>
ana:
<BLANKLINE>
ahmed.
<BLANKLINE>
ahmed.
<BLANKLINE>
only
>>> text_indentation(".:?.::??..::.??:??..:?:")
.
<BLANKLINE>
:
<BLANKLINE>
?
<BLANKLINE>
.
<BLANKLINE>
:
<BLANKLINE>
:
<BLANKLINE>
?
<BLANKLINE>
?
<BLANKLINE>
.
<BLANKLINE>
.
<BLANKLINE>
:
<BLANKLINE>
:
<BLANKLINE>
.
<BLANKLINE>
?
<BLANKLINE>
?
<BLANKLINE>
:
<BLANKLINE>
?
<BLANKLINE>
?
<BLANKLINE>
.
<BLANKLINE>
.
<BLANKLINE>
:
<BLANKLINE>
?
<BLANKLINE>
:
<BLANKLINE>
>>> text_indentation("\n")
<BLANKLINE>
>>> text_indentation("\n.\n")
<BLANKLINE>
.
<BLANKLINE>
<BLANKLINE>
>>> text_indentation("yes.    yes:    no?")
yes.
<BLANKLINE>
    yes:
<BLANKLINE>
    no?
<BLANKLINE>
